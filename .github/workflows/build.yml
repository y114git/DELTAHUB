name: Build and Release DELTAHUB (Linux + macOS x64 & arm64 + Windows)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Launcher version (X.X.X)"
        required: true
        type: string
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.12"
  # If run manually, prefix the provided version with 'v'. If triggered by tag push, use the tag name.
  RELEASE_VERSION: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', inputs.version) || github.ref_name }}

jobs:
  linux:
    name: Linux 路 onefile (spec)
    runs-on: ubuntu-22.04
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libglib2.0-dev libgl1-mesa-dev patchelf upx
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec
        run: |
          pyinstaller -y DELTAHUB.spec
          strip dist/DELTAHUB || true
          upx -9 dist/DELTAHUB || true
      - name: Cleanup secrets
        if: always()
        run: |
          git update-index --refresh || true
          rm -f secrets_embed.py || true
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-linux
          path: dist/DELTAHUB

  macos-x64:
    name: macOS 路 x86_64 (spec)
    runs-on: macos-13
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (x86_64)
        run: |
          pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: |
          codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: |
          rm -f secrets_embed.py || true
      - name: Zip .app
        run: |
          ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "DELTAHUB-macOS-x86_64-${{ env.RELEASE_VERSION }}.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-x86_64
          path: "DELTAHUB-macOS-x86_64-*.zip"

  macos-arm64:
    name: macOS 路 arm64 (spec)
    runs-on: macos-14
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (arm64)
        run: |
          pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: |
          codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: |
          rm -f secrets_embed.py || true
      - name: Zip .app
        run: |
          ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "DELTAHUB-macOS-arm64-${{ env.RELEASE_VERSION }}.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-arm64
          path: "DELTAHUB-macOS-arm64-*.zip"

  windows:
    name: Windows 路 exe (spec + Inno)
    runs-on: windows-latest
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        shell: powershell
        run: |
          $vals = @{ 
            DATA_FIREBASE_URL = "$env:DATA_FIREBASE_URL";
            FIREBASE_API_KEY = "$env:FIREBASE_API_KEY";
            FIREBASE_AUTH_EMAIL = "$env:FIREBASE_AUTH_EMAIL";
            FIREBASE_AUTH_PASS = "$env:FIREBASE_AUTH_PASS";
            INTERNAL_SALT = "$env:INTERNAL_SALT" 
          }
          $py = @()
          $py += 'import base64'
          $py += "def d(s): return base64.b64decode(s).decode('utf-8')"
          foreach ($k in $vals.Keys) {
            $b64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($vals[$k]))
            $py += "$k=d('$b64')"
          }
          Set-Content -Path secrets_embed.py -Value ($py -join [Environment]::NewLine) -Encoding UTF8
      - name: Locate VC runtime (auto)
        shell: powershell
        run: |
          $names = @("vcruntime140.dll", "vcruntime140_1.dll", "msvcp140.dll")
          $found = @()
          foreach ($n in $names) {
            $p = Join-Path $env:WINDIR ("System32/" + $n)
            if (Test-Path $p) { $found += $p }
          }
          if ($found.Count -gt 0) {
            $joined = [string]::Join([IO.Path]::PathSeparator, $found)
            echo "VCREDIST_DLLS=$joined" >> $env:GITHUB_ENV
          } else {
            Write-Host "No VC runtime DLLs found"
          }
      - name: Build via spec
        run: |
          pyinstaller -y DELTAHUB.spec
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-windows
          path: dist/DELTAHUB.exe
      # Inno Setup packaging
      - name: Install Inno Setup
        shell: powershell
        run: |
          choco install innosetup -y
      - name: Inject version into setup.iss
        shell: powershell
        run: |
          $ver = $env:RELEASE_VERSION.TrimStart('v')
          (Get-Content setup.iss -Raw) -replace '(?m)^(#define\s+AppVersion\s+\").*?(\")$', "`$1$ver`$2" | Set-Content setup.iss -Encoding UTF8
          Write-Host "AppVersion set to $ver in setup.iss"
      - name: Build installer (Inno Setup)
        shell: powershell
        run: |
          $iscc = (Get-Command iscc -ErrorAction SilentlyContinue).Source
          if (!$iscc) { $iscc = "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe" }
          if (Test-Path $iscc) { & "$iscc" setup.iss } else { Write-Host "ISCC not found after install"; exit 1 }
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-windows-setup
          path: "**/DELTAHUB_setup_v*.exe"

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [linux, macos-x64, macos-arm64, windows]
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-linux
          path: ./release_assets/DELTAHUB-linux
      - name: Download macOS x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-macOS-x86_64
          path: ./release_assets/DELTAHUB-macOS-x86_64
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-macOS-arm64
          path: ./release_assets/DELTAHUB-macOS-arm64
      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-windows-setup
          path: ./release_assets/DELTAHUB-windows-setup
      - name: List gathered assets
        run: |
          find ./release_assets -type f -maxdepth 3 -print
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: "DELTAHUB ${{ env.RELEASE_VERSION }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          files: |
            release_assets/DELTAHUB-linux/DELTAHUB
            release_assets/DELTAHUB-macOS-x86_64/DELTAHUB-macOS-x86_64-${{ env.RELEASE_VERSION }}.zip
            release_assets/DELTAHUB-macOS-arm64/DELTAHUB-macOS-arm64-${{ env.RELEASE_VERSION }}.zip
            release_assets/DELTAHUB-windows-setup/**/DELTAHUB_setup_v*.exe
