name: Build and Release DELTAHUB (Linux + macOS x64 & arm64 + Windows)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Launcher version (X.X.X)"
        required: true
        type: string
      archive_name_linux:
        description: "Archive name for Linux (e.g., DELTAHUB-Linux-v2.0.0)"
        required: false
        type: string
      archive_name_macos_x64:
        description: "Archive name for macOS x64 (e.g., DELTAHUB-macOS-x64-v2.0.0)"
        required: false
        type: string
      archive_name_macos_arm64:
        description: "Archive name for macOS arm64 (e.g., DELTAHUB-macOS-arm64-v2.0.0)"
        required: false
        type: string
      archive_name_windows:
        description: "Archive name for Windows Portable (e.g., DELTAHUB-Windows-v2.0.0)"
        required: false
        type: string
      archive_name_windows_setup:
        description: "Archive name for Windows Setup (e.g., DELTAHUB-Windows-Setup-v2.0.0)"
        required: false
        type: string
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.12"
  RELEASE_VERSION: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', inputs.version) || github.ref_name }}

jobs:
  linux:
    name: Linux · onefile (spec)
    runs-on: ubuntu-22.04
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Archive Name
        # ИЗМЕНЕНО: Добавляем ID и используем GITHUB_OUTPUT
        id: set_names
        run: |
          archive_name="${{ github.event.inputs.archive_name_linux || format('DELTAHUB-Linux-{0}', env.RELEASE_VERSION) }}"
          echo "archive_path=${archive_name}.zip" >> $GITHUB_OUTPUT
      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libglib2.0-dev libgl1-mesa-dev patchelf upx zip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v): return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {'DATA_FIREBASE_URL':os.environ.get('DATA_FIREBASE_URL',''),'FIREBASE_API_KEY':os.environ.get('FIREBASE_API_KEY',''),'FIREBASE_AUTH_EMAIL':os.environ.get('FIREBASE_AUTH_EMAIL',''),'FIREBASE_AUTH_PASS':os.environ.get('FIREBASE_AUTH_PASS',''),'INTERNAL_SALT':os.environ.get('INTERNAL_SALT','')}
          with open('secrets_embed.py','w',encoding='utf-8') as f:
            f.write('import base64\n'); f.write("def d(s): return base64.b64decode(s).decode('utf-8')\n")
            for k,v in vals.items(): f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec
        run: |
          pyinstaller -y DELTAHUB.spec
          strip dist/DELTAHUB || true
          upx -9 dist/DELTAHUB || true
      - name: Cleanup secrets
        if: always()
        run: rm -f secrets_embed.py || true
      - name: Create archive
        # ИЗМЕНЕНО: Используем output из предыдущего шага
        run: |
          mkdir -p archive_content
          mv dist/DELTAHUB archive_content/
          zip -r ${{ steps.set_names.outputs.archive_path }} archive_content
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Linux
          # ИЗМЕНЕНО: Используем output из предыдущего шага
          path: ${{ steps.set_names.outputs.archive_path }}

  macos-x64:
    name: macOS · x86_64 (spec)
    runs-on: macos-13
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Archive Name
        id: set_names
        run: |
          archive_name="${{ github.event.inputs.archive_name_macos_x64 || format('DELTAHUB-macOS-x64-{0}', env.RELEASE_VERSION) }}"
          echo "archive_path=${archive_name}.zip" >> $GITHUB_OUTPUT
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v): return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {'DATA_FIREBASE_URL':os.environ.get('DATA_FIREBASE_URL',''),'FIREBASE_API_KEY':os.environ.get('FIREBASE_API_KEY',''),'FIREBASE_AUTH_EMAIL':os.environ.get('FIREBASE_AUTH_EMAIL',''),'FIREBASE_AUTH_PASS':os.environ.get('FIREBASE_AUTH_PASS',''),'INTERNAL_SALT':os.environ.get('INTERNAL_SALT','')}
          with open('secrets_embed.py','w',encoding='utf-8') as f:
            f.write('import base64\n'); f.write("def d(s): return base64.b64decode(s).decode('utf-8')\n")
            for k,v in vals.items(): f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (x86_64)
        run: pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: rm -f secrets_embed.py || true
      - name: Create archive
        run: ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "${{ steps.set_names.outputs.archive_path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-x86_64
          path: ${{ steps.set_names.outputs.archive_path }}

  macos-arm64:
    name: macOS · arm64 (spec)
    runs-on: macos-14
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Archive Name
        id: set_names
        run: |
          archive_name="${{ github.event.inputs.archive_name_macos_arm64 || format('DELTAHUB-macOS-arm64-{0}', env.RELEASE_VERSION) }}"
          echo "archive_path=${archive_name}.zip" >> $GITHUB_OUTPUT
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v): return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {'DATA_FIREBASE_URL':os.environ.get('DATA_FIREBASE_URL',''),'FIREBASE_API_KEY':os.environ.get('FIREBASE_API_KEY',''),'FIREBASE_AUTH_EMAIL':os.environ.get('FIREBASE_AUTH_EMAIL',''),'FIREBASE_AUTH_PASS':os.environ.get('FIREBASE_AUTH_PASS',''),'INTERNAL_SALT':os.environ.get('INTERNAL_SALT','')}
          with open('secrets_embed.py','w',encoding='utf-8') as f:
            f.write('import base64\n'); f.write("def d(s): return base64.b64decode(s).decode('utf-8')\n")
            for k,v in vals.items(): f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (arm64)
        run: pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: rm -f secrets_embed.py || true
      - name: Create archive
        run: ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "${{ steps.set_names.outputs.archive_path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-arm64
          path: ${{ steps.set_names.outputs.archive_path }}

  windows:
    name: Windows · exe (spec + Inno)
    runs-on: windows-latest
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Archive Names
        id: set_names
        shell: powershell
        run: |
          $archiveName = "${{ github.event.inputs.archive_name_windows }}"
          if (-not $archiveName) { $archiveName = "DELTAHUB-Windows-${{ env.RELEASE_VERSION }}" }
          "archive_path=$($archiveName).zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
          $setupName = "${{ github.event.inputs.archive_name_windows_setup }}"
          if (-not $setupName) { $setupName = "DELTAHUB-Windows-Setup-${{ env.RELEASE_VERSION }}" }
          "setup_archive_path=$($setupName).zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        shell: powershell
        run: |
          $vals = @{'DATA_FIREBASE_URL'="$env:DATA_FIREBASE_URL";'FIREBASE_API_KEY'="$env:FIREBASE_API_KEY";'FIREBASE_AUTH_EMAIL'="$env:FIREBASE_AUTH_EMAIL";'FIREBASE_AUTH_PASS'="$env:FIREBASE_AUTH_PASS";'INTERNAL_SALT'="$env:INTERNAL_SALT"}
          $py = @('import base64', "def d(s): return base64.b64decode(s).decode('utf-8')")
          foreach ($k in $vals.Keys) { $b64=[Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($vals[$k])); $py += "$k=d('$b64')"}
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false); [System.IO.File]::WriteAllLines('secrets_embed.py',$py,$utf8NoBom)
      - name: Build via spec
        run: pyinstaller -y DELTAHUB.spec
      - name: Create archive for portable exe
        shell: powershell
        run: Compress-Archive -Path dist\DELTAHUB.exe -DestinationPath "${{ steps.set_names.outputs.archive_path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Windows
          path: ${{ steps.set_names.outputs.archive_path }}
      
      # Inno Setup packaging
      - name: Install Inno Setup
        run: choco install innosetup -y
      - name: Inject version into setup.iss
        shell: powershell
        run: |
          $ver = $env:RELEASE_VERSION.TrimStart('v')
          (Get-Content -Path setup.iss -Raw) -replace '(?m)^(#define\s+AppVersion\s+\").*?(\")$', "`$1$ver`$2" | Set-Content -Path setup.iss -Encoding utf8NoBOM
      - name: Build installer (Inno Setup)
        shell: powershell
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup.iss
      - name: Create archive for setup exe
        shell: powershell
        run: |
          $exe = Get-ChildItem -Path "Output" -Filter "DELTAHUB_setup_v*.exe" | Select-Object -First 1
          if (-not $exe) { Write-Error "Installer not found"; exit 1 }
          Compress-Archive -Path $exe.FullName -DestinationPath "${{ steps.set_names.outputs.setup_archive_path }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Windows-Setup
          path: ${{ steps.set_names.outputs.setup_archive_path }}

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [linux, macos-x64, macos-arm64, windows]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_assets
          merge-multiple: true 
          
      - name: List gathered assets
        run: find ./release_assets -type f -name "*.zip" -print

      - name: Get existing release
        id: get_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ env.RELEASE_VERSION }}'
              });
              return release.data;
            } catch (error) {
              if (error.status === 404) return null;
              throw error;
            }
      
      - name: Delete existing release assets if release exists
        if: steps.get_release.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const release = JSON.parse('${{ steps.get_release.outputs.result }}');
            for (const asset of release.assets) {
              console.log('Deleting existing asset:', asset.name);
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id,
              });
            }

      - name: Create or update GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: "DELTAHUB ${{ env.RELEASE_VERSION }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: true
          files: |
            release_assets/*.zip