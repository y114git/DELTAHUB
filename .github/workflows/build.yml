name: Build and Release DELTAHUB (Linux + macOS x64 & arm64 + Windows)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Launcher version (X.X.X)"
        required: true
        type: string
      linux_archive_name:
        description: "Inner archive name for Linux (e.g. MyLinux.zip)"
        required: false
        type: string
      macos_x64_archive_name:
        description: "Inner archive name for macOS x86_64 (e.g. MyMac-x64.zip)"
        required: false
        type: string
      macos_arm64_archive_name:
        description: "Inner archive name for macOS arm64 (e.g. MyMac-arm64.zip)"
        required: false
        type: string
      windows_bin_archive_name:
        description: "Inner archive name for Windows binary (e.g. MyWin.zip)"
        required: false
        type: string
      windows_setup_archive_name:
        description: "Inner archive name for Windows installer (e.g. MyInstaller.zip)"
        required: false
        type: string
  push:
    tags: ["v*.*.*"]

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.12"
  # If run manually, prefix the provided version with 'v'. If triggered by tag push, use the tag name.
  RELEASE_VERSION: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', inputs.version) || github.ref_name }}

jobs:
  linux:
    name: Linux · onefile (spec)
    runs-on: ubuntu-22.04
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
      INNER_ARCHIVE_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.linux_archive_name || format('DELTAHUB-Linux-{0}.zip', env.RELEASE_VERSION) }}
    steps:
      - uses: actions/checkout@v4
      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libglib2.0-dev libgl1-mesa-dev patchelf upx zip
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec
        run: |
          pyinstaller -y DELTAHUB.spec
          strip dist/DELTAHUB || true
          upx -9 dist/DELTAHUB || true
      - name: Create inner archive (zip)
        run: |
          zip -j "${{ env.INNER_ARCHIVE_NAME }}" dist/DELTAHUB
      - name: Cleanup secrets
        if: always()
        run: |
          git update-index --refresh || true
          rm -f secrets_embed.py || true
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Linux
          path: "${{ env.INNER_ARCHIVE_NAME }}"

  macos-x64:
    name: macOS · x86_64 (spec)
    runs-on: macos-13
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
      INNER_ARCHIVE_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.macos_x64_archive_name || format('DELTAHUB-macOS-x86_64-{0}.zip', env.RELEASE_VERSION) }}
    steps:
      - uses: actions/checkout@v4
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (x86_64)
        run: |
          pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: |
          codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: |
          rm -f secrets_embed.py || true
      - name: Zip .app (inner archive)
        run: |
          ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "${{ env.INNER_ARCHIVE_NAME }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-x86_64
          path: "${{ env.INNER_ARCHIVE_NAME }}"

  macos-arm64:
    name: macOS · arm64 (spec)
    runs-on: macos-14
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
      INNER_ARCHIVE_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.macos_arm64_archive_name || format('DELTAHUB-macOS-arm64-{0}.zip', env.RELEASE_VERSION) }}
    steps:
      - uses: actions/checkout@v4
      - name: Extra tools
        run: brew install upx || true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        run: |
          python - <<'PY'
          import os, base64
          def e(v):
              return base64.b64encode(v.encode('utf-8')).decode('ascii')
          vals = {
            'DATA_FIREBASE_URL': os.environ.get('DATA_FIREBASE_URL',''),
            'FIREBASE_API_KEY': os.environ.get('FIREBASE_API_KEY',''),
            'FIREBASE_AUTH_EMAIL': os.environ.get('FIREBASE_AUTH_EMAIL',''),
            'FIREBASE_AUTH_PASS': os.environ.get('FIREBASE_AUTH_PASS',''),
            'INTERNAL_SALT': os.environ.get('INTERNAL_SALT',''),
          }
          with open('secrets_embed.py','w', encoding='utf-8') as f:
              f.write('import base64\n')
              f.write('def d(s): return base64.b64decode(s).decode(\'utf-8\')\n')
              for k,v in vals.items():
                  f.write(f"{k}=d('{e(v)}')\n")
          PY
      - name: Build via spec (arm64)
        run: |
          pyinstaller -y DELTAHUB.spec
      - name: Codesign (adhoc)
        run: |
          codesign --force --deep --sign - "dist/DELTAHUB.app"
      - name: Cleanup secrets
        if: always()
        run: |
          rm -f secrets_embed.py || true
      - name: Zip .app (inner archive)
        run: |
          ditto -c -k --sequesterRsrc --keepParent "dist/DELTAHUB.app" "${{ env.INNER_ARCHIVE_NAME }}"
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-macOS-arm64
          path: "${{ env.INNER_ARCHIVE_NAME }}"

  windows:
    name: Windows · exe (spec + Inno)
    runs-on: windows-latest
    env:
      DATA_FIREBASE_URL: ${{ secrets.DATA_FIREBASE_URL }}
      FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      FIREBASE_AUTH_EMAIL: ${{ secrets.FIREBASE_AUTH_EMAIL }}
      FIREBASE_AUTH_PASS: ${{ secrets.FIREBASE_AUTH_PASS }}
      INTERNAL_SALT: ${{ secrets.INTERNAL_SALT }}
      BIN_ARCHIVE_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.windows_bin_archive_name || format('DELTAHUB-Windows-{0}.zip', env.RELEASE_VERSION) }}
      SETUP_ARCHIVE_NAME: ${{ github.event_name == 'workflow_dispatch' && inputs.windows_setup_archive_name || format('DELTAHUB-Windows-Setup-{0}.zip', env.RELEASE_VERSION) }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install pip deps
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt pyinstaller
      - name: Generate secrets_embed.py
        shell: powershell
        run: |
          $vals = @{ 
            DATA_FIREBASE_URL = "$env:DATA_FIREBASE_URL";
            FIREBASE_API_KEY = "$env:FIREBASE_API_KEY";
            FIREBASE_AUTH_EMAIL = "$env:FIREBASE_AUTH_EMAIL";
            FIREBASE_AUTH_PASS = "$env:FIREBASE_AUTH_PASS";
            INTERNAL_SALT = "$env:INTERNAL_SALT" 
          }
          $py = @()
          $py += 'import base64'
          $py += "def d(s): return base64.b64decode(s).decode('utf-8')"
          foreach ($k in $vals.Keys) {
            $b64 = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($vals[$k]))
            $py += "$k=d('$b64')"
          }
          # ✅ ИСПРАВЛЕНО: Сохраняем файл secrets_embed.py в UTF-8 без BOM
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllLines('secrets_embed.py', $py, $utf8NoBom)
      - name: Locate VC runtime (auto)
        shell: powershell
        run: |
          $names = @("vcruntime140.dll", "vcruntime140_1.dll", "msvcp140.dll")
          $found = @()
          foreach ($n in $names) {
            $p = Join-Path $env:WINDIR ("System32/" + $n)
            if (Test-Path $p) { $found += $p }
          }
          if ($found.Count -gt 0) {
            $joined = [string]::Join([IO.Path]::PathSeparator, $found)
            echo "VCREDIST_DLLS=$joined" >> $env:GITHUB_ENV
          } else {
            Write-Host "No VC runtime DLLs found"
          }
      - name: Build via spec
        run: |
          pyinstaller -y DELTAHUB.spec
      - name: Create inner archive for Windows binary (zip)
        shell: powershell
        run: |
          Compress-Archive -Path "dist/DELTAHUB.exe" -DestinationPath "$env:BIN_ARCHIVE_NAME" -Force
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Windows
          path: "${{ env.BIN_ARCHIVE_NAME }}"
      # Inno Setup packaging
      - name: Install Inno Setup
        shell: powershell
        run: |
          choco install innosetup -y
      - name: Check wizard small image exists
        shell: powershell
        run: |
          if (-not (Test-Path "assets/icon_small.bmp")) {
            Write-Error "assets/icon_small.bmp is missing. Commit it to the repo."; exit 1
          }
          Write-Host "Found assets/icon_small.bmp"
          dir assets
      - name: Sanitize setup.iss (normalize spaces & encoding)
        shell: powershell
        run: |
          $c = Get-Content setup.iss -Raw
          $c = $c.Replace([char]0x00A0, ' ').Replace([char]0x2007, ' ').Replace([char]0x202F, ' ')
          # ✅ ИСПРАВЛЕНО: Сохраняем файл в UTF-8 без BOM
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText("$pwd\setup.iss", $c, $utf8NoBom)
      - name: Inject version into setup.iss
        shell: powershell
        run: |
          $ver = $env:RELEASE_VERSION.TrimStart('v')
          $content = Get-Content -Path setup.iss -Raw
          $newContent = $content -replace '(?m)^(#define\s+AppVersion\s+\").*?(\")$', "`$1$ver`$2"
          # ✅ ИСПРАВЛЕНО: Сохраняем файл в UTF-8 без BOM
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          [System.IO.File]::WriteAllText("$pwd\setup.iss", $newContent, $utf8NoBom)
          Write-Host "AppVersion set to $ver in setup.iss"
      - name: Build installer (Inno Setup)
        shell: powershell
        run: |
          $iscc = (Get-Command iscc -ErrorAction SilentlyContinue).Source
          if (!$iscc) { $iscc = "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe" }
          if (Test-Path $iscc) { & "$iscc" setup.iss } else { Write-Host "ISCC not found after install"; exit 1 }
      - name: Collect installer to workspace root
        shell: powershell
        run: |
          $ver = $env:RELEASE_VERSION
          $exe = Get-ChildItem -Recurse -Filter "DELTAHUB_setup_v*.exe" | Select-Object -First 1
          if (-not $exe) { Write-Error "Installer not found"; exit 1 }
          Copy-Item $exe.FullName "DELTAHUB-Windows-Setup-$ver.exe" -Force
          Write-Host "Collected installer: DELTAHUB-Windows-Setup-$ver.exe"
      - name: Create inner archive for Windows installer (zip)
        shell: powershell
        run: |
          Compress-Archive -Path "DELTAHUB-Windows-Setup-$env:RELEASE_VERSION.exe" -DestinationPath "$env:SETUP_ARCHIVE_NAME" -Force
      - uses: actions/upload-artifact@v4
        with:
          name: DELTAHUB-Windows-Setup
          path: "${{ env.SETUP_ARCHIVE_NAME }}"

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [linux, macos-x64, macos-arm64, windows]
    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-Linux
          path: ./release_assets/DELTAHUB-Linux
      - name: Download macOS x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-macOS-x86_64
          path: ./release_assets/DELTAHUB-macOS-x86_64
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-macOS-arm64
          path: ./release_assets/DELTAHUB-macOS-arm64
      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-Windows-Setup
          path: ./release_assets/DELTAHUB-Windows-Setup
      - name: Download Windows binary artifact
        uses: actions/download-artifact@v4
        with:
          name: DELTAHUB-Windows
          path: ./release_assets/DELTAHUB-Windows
      - name: List gathered assets
        run: |
          find ./release_assets -type f -maxdepth 6 -print
      - name: Remove existing assets if release already exists
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          if gh release view "${{ env.RELEASE_VERSION }}" >/dev/null 2>&1; then
            echo "Release exists. Deleting all existing assets..."
            for a in $(gh release view "${{ env.RELEASE_VERSION }}" --json assets --jq '.assets[].name'); do
              echo "Deleting asset: $a"
              gh release delete-asset "${{ env.RELEASE_VERSION }}" "$a" -y || true
            done
          else
            echo "Release does not exist yet. It will be created."
          fi
      - name: Create/Update GitHub Release and upload inner archives
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: "DELTAHUB ${{ env.RELEASE_VERSION }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: true
          files: |
            release_assets/**/*.zip
        env:
          GITHUB_TOKEN: ${{ github.token }}
